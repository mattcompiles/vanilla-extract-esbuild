'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var path = require('path');
var fs = require('fs');
var adapter = require('@vanilla-extract/css/adapter');
var transformCss = require('@vanilla-extract/css/transformCss');
var dedent = require('dedent');
var findUp = require('find-up');
var esbuild = require('esbuild');
var evalCode = require('eval');
var javascriptStringify = require('javascript-stringify');
var isPlainObject = require('lodash/isPlainObject');
var crypto = require('crypto');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var dedent__default = /*#__PURE__*/_interopDefault(dedent);
var findUp__default = /*#__PURE__*/_interopDefault(findUp);
var evalCode__default = /*#__PURE__*/_interopDefault(evalCode);
var isPlainObject__default = /*#__PURE__*/_interopDefault(isPlainObject);
var crypto__default = /*#__PURE__*/_interopDefault(crypto);

const hash = value => crypto__default['default'].createHash('md5').update(value).digest('hex');

const vanillaCssNamespace = 'vanilla-extract-css-ns';
const cssFileFilter = /\.css\.(js|jsx|ts|tsx)$/;

const vanillaExtractFilescopePlugin = () => ({
  name: 'vanilla-extract-filescope',

  setup(build) {
    const packageJsonPath = findUp__default['default'].sync('package.json', {
      cwd: build.initialOptions.absWorkingDir
    });

    if (!packageJsonPath) {
      throw new Error(`Can't find package.json`);
    }

    const {
      name
    } = require(packageJsonPath);

    const packageInfo = {
      name,
      path: packageJsonPath,
      dirname: path.dirname(packageJsonPath)
    };
    build.onLoad({
      filter: cssFileFilter
    }, async ({
      path: path$1
    }) => {
      const originalSource = await fs.promises.readFile(path$1, 'utf-8');

      if (originalSource.indexOf('@vanilla-extract/css/fileScope') === -1) {
        const filePath = path.relative(packageInfo.dirname, path$1);
        const contents = `
        import { setFileScope, endFileScope } from "@vanilla-extract/css/fileScope";
        setFileScope("${filePath}", "${packageInfo.name}");
        ${originalSource}
        endFileScope()
        `;
        return {
          contents,
          resolveDir: path.dirname(path$1)
        };
      }
    });
  }

});

function vanillaExtractPlugin({
  outputCss = true,
  externals = [],
  runtime = false
} = {}) {
  if (runtime) {
    // If using runtime CSS then just apply fileScopes to code
    return vanillaExtractFilescopePlugin();
  }

  return {
    name: 'vanilla-extract',

    setup(build) {
      build.onResolve({
        filter: /vanilla\.css\?source=.*$/
      }, args => {
        return {
          path: args.path,
          namespace: vanillaCssNamespace
        };
      });
      build.onLoad({
        filter: /.*/,
        namespace: vanillaCssNamespace
      }, ({
        path
      }) => {
        var _path$match;

        const [, source] = (_path$match = path.match(/\?source=(.*)$/)) !== null && _path$match !== void 0 ? _path$match : [];

        if (!source) {
          throw new Error('No source in vanilla CSS file');
        }

        return {
          contents: Buffer.from(source, 'base64').toString('utf-8'),
          loader: 'css'
        };
      });
      build.onLoad({
        filter: cssFileFilter
      }, async ({
        path
      }) => {
        const result = await esbuild.build({
          entryPoints: [path],
          metafile: true,
          bundle: true,
          external: ['@vanilla-extract', ...externals],
          platform: 'node',
          write: false,
          plugins: [vanillaExtractFilescopePlugin()],
          absWorkingDir: build.initialOptions.absWorkingDir
        });
        const {
          outputFiles,
          metafile
        } = result;

        if (!outputFiles || outputFiles.length !== 1) {
          throw new Error('Invalid child compilation');
        }

        function stringifyFileScope({
          packageName,
          filePath
        }) {
          return packageName ? `${filePath}$$$${packageName}` : filePath;
        }

        function parseFileScope(serialisedFileScope) {
          const [filePath, packageName] = serialisedFileScope.split('$$$');
          return {
            filePath,
            packageName
          };
        }

        const cssByFileScope = new Map();
        const localClassNames = new Set();
        const cssAdapter = {
          appendCss: (css, fileScope) => {
            if (outputCss) {
              var _cssByFileScope$get;

              const serialisedFileScope = stringifyFileScope(fileScope);
              const fileScopeCss = (_cssByFileScope$get = cssByFileScope.get(serialisedFileScope)) !== null && _cssByFileScope$get !== void 0 ? _cssByFileScope$get : [];
              fileScopeCss.push(css);
              cssByFileScope.set(serialisedFileScope, fileScopeCss);
            }
          },
          registerClassName: className => {
            localClassNames.add(className);
          },
          onEndFileScope: () => {}
        };
        adapter.setAdapter(cssAdapter);
        const sourceWithBoundLoaderInstance = `require('@vanilla-extract/css/adapter').setAdapter(__adapter__);${outputFiles[0].text}`;
        const evalResult = evalCode__default['default'](sourceWithBoundLoaderInstance, path, {
          console,
          __adapter__: cssAdapter
        }, true);
        const cssRequests = [];

        for (const [serialisedFileScope, fileScopeCss] of cssByFileScope) {
          const {
            packageName,
            filePath
          } = parseFileScope(serialisedFileScope);
          const css = transformCss.transformCss({
            localClassNames: Array.from(localClassNames),
            cssObjs: fileScopeCss
          }).join('\n');
          const base64Css = Buffer.from(css, 'utf-8').toString('base64');
          const fileName = packageName ? `${packageName}/${filePath}` : filePath;
          cssRequests.push(`${fileName}.vanilla.css?source=${base64Css}`);
        }

        const contents = serializeVanillaModule(cssRequests, evalResult);
        return {
          contents,
          loader: 'js',
          watchFiles: Object.keys((metafile === null || metafile === void 0 ? void 0 : metafile.inputs) || {})
        };
      });
    }

  };
}

const stringifyExports = (recipeImports, value) => javascriptStringify.stringify(value, (value, _indent, next) => {
  const valueType = typeof value;

  if (valueType === 'string' || valueType === 'number' || valueType === 'undefined' || value === null || Array.isArray(value) || isPlainObject__default['default'](value)) {
    return next(value);
  }

  if (valueType === 'function' && value.__recipe__) {
    const {
      importPath,
      importName,
      args
    } = value.__recipe__;

    if (typeof importPath !== 'string' || typeof importName !== 'string' || !Array.isArray(args)) {
      throw new Error('Invalid recipe');
    }

    try {
      const hashedImportName = `_${hash(`${importName}${importPath}`).slice(0, 5)}`;
      recipeImports.add(`import { ${importName} as ${hashedImportName} } from '${importPath}';`);
      return `${hashedImportName}(${args.map(arg => stringifyExports(recipeImports, arg)).join(',')})`;
    } catch (err) {
      console.error(err);
      throw new Error('Invalid recipe.');
    }
  }

  throw new Error(dedent__default['default']`
        Invalid exports.

        You can only export plain objects, arrays, strings, numbers and null/undefined.
      `);
}, 0, {
  references: true,
  // Allow circular references
  maxDepth: Infinity,
  maxValues: Infinity
});

const serializeVanillaModule = (cssRequests, exports) => {
  const cssImports = cssRequests.map(request => {
    return `import '${request}';`;
  });
  const recipeImports = new Set();
  const moduleExports = Object.keys(exports).map(key => key === 'default' ? `export default ${stringifyExports(recipeImports, exports[key])};` : `export var ${key} = ${stringifyExports(recipeImports, exports[key])};`);
  const outputCode = [...cssImports, ...recipeImports, ...moduleExports];
  return outputCode.join('\n');
};

exports.vanillaExtractPlugin = vanillaExtractPlugin;
